name: CI/CD pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # generate-sbom:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v1

  #   - name: Cache Docker layers
  #     uses: actions/cache@v2
  #     with:
  #       path: /tmp/.buildx-cache
  #       key: ${{ runner.os }}-buildx-${{ github.sha }}
  #       restore-keys: |
  #         ${{ runner.os }}-buildx-

  #   - name: Build Docker image
  #     run: |
  #       docker build . -t test-application:latest

  #   - name: Save Docker image
  #     run: |
  #       docker save test-application:latest -o test-application.tar

  #   - name: Install Syft
  #     run: |
  #       curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

  #   - name: Generate SBOM
  #     run: |
  #       syft packages test-application:latest -o cyclonedx-json > sbom.json

  #   - name: Upload SBOM
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: sbom
  #       path: sbom.json

  #   - name: Upload Docker image
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: docker-image
  #       path: test-application.tar

  # generate-sca:
  #   runs-on: ubuntu-latest
  #   needs: generate-sbom

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Download SBOM
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: sbom
  #       path: .

  #   - name: Install Grype
  #     run: |
  #       curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

  #   - name: Execute SCA
  #     run: |
  #       grype sbom:sbom.json > grype-report.txt

  #   - name: Upload SCA Report
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: grype-report
  #       path: grype-report.txt

  # container-scan:
  #   runs-on: ubuntu-latest
  #   needs: generate-sbom

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Download Docker image
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: docker-image
  #       path: .

  #   - name: Load Docker image
  #     run: |
  #       docker load -i test-application.tar

  #   - name: Install Trivy
  #     run: |
  #       sudo apt-get update -y
  #       sudo apt-get install -y wget apt-transport-https gnupg lsb-release
  #       wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
  #       echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
  #       sudo apt-get update -y
  #       sudo apt-get install -y trivy

  #   - name: Scan Docker image for vulnerabilities
  #     run: |
  #       trivy image test-application:latest --severity HIGH,CRITICAL --scanners secret --format json --output trivy-report.json

  #   - name: Upload Trivy Report
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: trivy-report
  #       path: trivy-report.json

  # sast-scan:
  #   runs-on: ubuntu-latest
  #   needs: generate-sbom

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Install Semgrep
  #     run: |
  #       python3 -m pip install semgrep

  #   - name: Run Semgrep
  #     run: |
  #       semgrep --config p/ci > semgrep-report.txt

  #   - name: Upload Semgrep Report
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: semgrep-report
  #       path: semgrep-report.txt

  dast-scan:
    runs-on: ubuntu-latest
    needs: generate-sbom

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download Docker image
      uses: actions/download-artifact@v2
      with:
        name: docker-image
        path: .

    - name: Load Docker image
      run: |
        docker load -i test-application.tar

    - name: Run Docker container
      run: |
        docker run -d -p 8080:8080 --name test-application test-application:latest

    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y wget unzip openjdk-11-jdk

    - name: Download OWASP ZAP
      run: |
        wget https://github.com/zaproxy/zaproxy/releases/download/w2024-07-22/ZAP_WEEKLY_D-2024-07-22.zip -O zap.zip
        unzip zap.zip -d zap

    - name: Run ZAP Scan
      run: |
        zap/ZAP_D-2024-07-22/zap.sh -daemon -port 8090 -config api.disablekey=true
        sleep 60 # Give ZAP some time to start
        zap/ZAP_D-2024-07-22/zap.sh -cmd -quickurl http://localhost:8080 -quickprogress -quickout zap-report.html

    - name: Upload ZAP Report
      uses: actions/upload-artifact@v2
      with:
        name: zap-report
        path: zap-report.html
